import { Material, Mesh, Camera } from "./three-core";
import { LoadingManager } from "./three-core";
import { Group } from "./three-core";
import { MaterialCreator } from "./three-mtlloader";
import { Loader, Object3D } from "./three-core"
export class MMDLoader extends Loader {
    constructor(manager?: LoadingManager);
    manager: LoadingManager;
    regexp: any;
    materials: Material[];
    path: string;

    load(this: MMDLoader, modelUrl: string, vmdUrls: string[], callBack?: (o: THREE.SkinnedMesh) => void, onProgress?: (e: ProgressEvent) => void): void;
    parse(data: string): Group;
    setPath(value: string): void;
    setMaterials(materials: MaterialCreator): void;
    _createParserState(): any;
    loadVmds(urls: string[],callBack?:(o:Mesh) => void);
    pourVmdIntoCamera(camera:Camera, vmd, name?);
    loadAudio(a,callBack);
    loadModel(url, callback, onProgress?, onError?);
}
export class MMDHelper extends Object3D {
    setAnimation(m?: Mesh);
    setPhysics(m?: Mesh);
    setCamera(c:Camera);
    setCameraAnimation(c:Camera);
    setAudio(a,l,p);
    unifyAnimationDuration(o);
    animate(n:number);
}