{"version":3,"file":"builder.js","sourceRoot":"","sources":["../src/builder.ts"],"names":[],"mappings":"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","sourcesContent":["#! /usr/bin/env node\n\nrequire(\"v8-compile-cache\")\n\nimport * as ts from \"typescript\"\nimport * as babel from \"babel-core\"\nimport { readdir, ensureDir, unlink, outputFile, outputJson } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { transpile, checkErrors } from \"./util\"\n\ntranspile(async (basePath: string, config: ts.ParsedCommandLine, tsConfig: any) => {\n  const compilerOptions = config.options\n  if (tsConfig.declaration !== false) {\n    compilerOptions.declaration = true\n  }\n\n  compilerOptions.noEmitOnError = true\n\n  const program = ts.createProgram(config.fileNames, compilerOptions, ts.createCompilerHost(compilerOptions))\n  checkErrors(ts.getPreEmitDiagnostics(program))\n\n  const compilerOutDir = compilerOptions.outDir\n  if (compilerOutDir == null) {\n    throw new Error(\"outDir is not specified in the compilerOptions\")\n  }\n\n  await ensureDir(compilerOutDir)\n\n  const fileToSourceMap: any = {}\n  const promises: Array<Promise<any>> = []\n  const emittedFiles = new Set<string>()\n  const emitResult = program.emit(undefined, (fileName: string, data: any) => {\n    emittedFiles.add(fileName)\n\n    if (fileName.endsWith(\".js\")) {\n      const sourceMapFileName = `${fileName}.map`\n      processCompiled(data, fileToSourceMap[sourceMapFileName], fileName, sourceMapFileName, promises)\n    }\n    else if (fileName.endsWith(\".js.map\")) {\n      fileToSourceMap[fileName] = data\n    }\n    else {\n      promises.push(outputFile(fileName, data))\n    }\n  })\n\n  checkErrors(emitResult.diagnostics)\n  if (emitResult.emitSkipped) {\n    throw new Error(\"Emit skipped\")\n  }\n\n  await BluebirdPromise.all(promises)\n  await removeOld(compilerOutDir, emittedFiles)\n})\n  .catch(error => {\n    console.error(error.stack || error.message || error)\n    process.exit(-1)\n  })\n\nasync function removeOld(outDir: string, emittedFiles: Set<string>): Promise<any> {\n  await BluebirdPromise.map(await readdir(outDir), file => {\n    // ts uses / regardless of OS\n    const fullPath = `${outDir}/${file}`\n    if (!file.includes(\".\")) {\n      return removeOld(fullPath, emittedFiles)\n    }\n\n    if ((file.endsWith(\".js\") || file.endsWith(\".js.map\") || file.endsWith(\".d.ts\")) && !emittedFiles.has(fullPath)) {\n      return unlink(fullPath)\n    }\n    return null\n  })\n}\n\nfunction processCompiled(code: string, sourceMap: string, jsFileName: string, sourceMapFileName: string, promises: Array<Promise<any>>) {\n  const result = babel.transform(code, {\n    inputSourceMap: sourceMap == null ? null : JSON.parse(sourceMap),\n    sourceMaps: true,\n    filename: jsFileName,\n  })\n\n  promises.push(\n    outputFile(jsFileName, result.code),\n    outputJson(sourceMapFileName, result.map))\n}"]}
