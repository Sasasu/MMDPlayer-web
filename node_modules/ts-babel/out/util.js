"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.readProjectMetadata = exports.transpile = undefined;

var _bluebirdLst;

function _load_bluebirdLst() {
    return _bluebirdLst = require("bluebird-lst");
}

var _bluebirdLst2;

function _load_bluebirdLst2() {
    return _bluebirdLst2 = _interopRequireDefault(require("bluebird-lst"));
}

let transpile = exports.transpile = (() => {
    var _ref = (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* (transpilator) {
        const paths = process.argv.slice(2);
        if (paths.length == 0) {
            paths.push(process.cwd());
        }
        if (paths[0].endsWith(globSuffix)) {
            const packageDir = paths[0].substring(0, paths[0].length - 2);
            const packageMetadata = yield readProjectMetadata(packageDir);
            const toCompile = (0, (_PackageGraph || _load_PackageGraph()).topologicallyBatchPackages)(packageMetadata);
            yield (_bluebirdLst2 || _load_bluebirdLst2()).default.mapSeries(toCompile, function (it) {
                console.log(`Building ${it.map(function (it) {
                    return it.name;
                }).join(", ")}`);
                return transpilePaths(it.map(function (it) {
                    return _path.join(packageDir, it.name);
                }), transpilator, false);
            });
        }
        yield transpilePaths(paths.filter(function (it) {
            return !it.endsWith(globSuffix);
        }), transpilator, true);
    });

    return function transpile(_x) {
        return _ref.apply(this, arguments);
    };
})();

let readProjectMetadata = exports.readProjectMetadata = (() => {
    var _ref2 = (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* (packageDir) {
        const packageDirs = (_bluebirdLst2 || _load_bluebirdLst2()).default.filter((yield (0, (_fsExtraP || _load_fsExtraP()).readdir)(packageDir)).filter(function (it) {
            return !it.includes(".");
        }).sort(), function (it) {
            return (0, (_fsExtraP || _load_fsExtraP()).stat)(_path.join(packageDir, it, "tsconfig.json")).then(function (it) {
                return it.isFile();
            }).catch(function () {
                return false;
            });
        });
        return yield (_bluebirdLst2 || _load_bluebirdLst2()).default.map(packageDirs, function (it) {
            return (0, (_fsExtraP || _load_fsExtraP()).readJson)(_path.join(packageDir, it, "package.json"));
        }, { concurrency: 8 });
    });

    return function readProjectMetadata(_x2) {
        return _ref2.apply(this, arguments);
    };
})();

let transpilePaths = (() => {
    var _ref3 = (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* (paths, transpilator, isLogBuilding) {
        for (const basePath of paths) {
            if (isLogBuilding) {
                console.log(`Building ${basePath}`);
            }
            try {
                yield build(basePath, transpilator);
            } catch (e) {
                if (!(e instanceof CompilationError)) {
                    throw e;
                }
                for (const diagnostic of e.errors) {
                    if (diagnostic.file == null) {
                        console.log(diagnostic.messageText);
                        continue;
                    }
                    const location = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
                    const message = (_typescript || _load_typescript()).flattenDiagnosticMessageText(diagnostic.messageText, '\n');
                    console.log(`${diagnostic.file.fileName} (${location.line + 1}, ${location.character + 1}): ${message}`);
                }
                process.exit(-1);
                return;
            }
        }
    });

    return function transpilePaths(_x3, _x4, _x5) {
        return _ref3.apply(this, arguments);
    };
})();

let build = (() => {
    var _ref4 = (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* (basePath, transpilator) {
        const tsConfigPath = _path.join(basePath, "tsconfig.json");
        const jsonResult = (_typescript || _load_typescript()).parseConfigFileTextToJson(tsConfigPath, (yield (0, (_fsExtraP || _load_fsExtraP()).readFile)(tsConfigPath, "utf8")));
        if (jsonResult.error != null) {
            throw new CompilationError([jsonResult.error]);
        }
        const result = (_typescript || _load_typescript()).parseJsonConfigFileContent(jsonResult.config, (_typescript || _load_typescript()).sys, basePath);
        checkErrors(result.errors);
        yield transpilator(basePath, result, jsonResult.config);
    });

    return function build(_x6, _x7) {
        return _ref4.apply(this, arguments);
    };
})();

exports.checkErrors = checkErrors;

var _typescript;

function _load_typescript() {
    return _typescript = _interopRequireWildcard(require("typescript"));
}

var _path = _interopRequireWildcard(require("path"));

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _PackageGraph;

function _load_PackageGraph() {
    return _PackageGraph = require("./PackageGraph");
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const globSuffix = "/*";
function checkErrors(errors) {
    if (errors.length !== 0) {
        throw new CompilationError(errors);
    }
}
class CompilationError extends Error {
    constructor(errors) {
        super("Compilation error");
        this.errors = errors;
    }
}
//# sourceMappingURL=util.js.map