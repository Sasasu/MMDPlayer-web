{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\"\nimport * as path from \"path\"\nimport { readFile, readdir, stat, readJson } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { topologicallyBatchPackages } from \"./PackageGraph\"\n\nconst globSuffix = \"/*\"\n\nexport async function transpile(transpilator: (basePath: string, config: ts.ParsedCommandLine, tsConfig: any) => Promise<any>) {\n  const paths = process.argv.slice(2)\n  if (paths.length == 0) {\n    paths.push(process.cwd())\n  }\n\n  if (paths[0].endsWith(globSuffix)) {\n    const packageDir = paths[0].substring(0, paths[0].length - 2)\n    const packageMetadata = await readProjectMetadata(packageDir)\n    const toCompile = topologicallyBatchPackages(packageMetadata)\n    await BluebirdPromise.mapSeries(toCompile, it => {\n      console.log(`Building ${it.map(it => it.name).join(\", \")}`)\n      return transpilePaths(it.map(it => path.join(packageDir, it.name)), transpilator, false)\n    })\n  }\n  await transpilePaths(paths.filter(it => !it.endsWith(globSuffix)), transpilator, true)\n}\n\nexport async function readProjectMetadata(packageDir: string) {\n  const packageDirs = BluebirdPromise.filter((await readdir(packageDir)).filter(it => !it.includes(\".\")).sort(), it => {\n    return stat(path.join(packageDir, it, \"tsconfig.json\"))\n      .then(it => it.isFile())\n      .catch(() => false)\n  })\n  return await BluebirdPromise.map(packageDirs, it => readJson(path.join(packageDir, it, \"package.json\")), {concurrency: 8})\n}\n\nasync function transpilePaths(paths: Array<string>, transpilator: (basePath: string, config: ts.ParsedCommandLine, tsConfig: any) => Promise<any>, isLogBuilding: boolean) {\n  for (const basePath of paths) {\n    if (isLogBuilding) {\n      console.log(`Building ${basePath}`)\n    }\n\n    try {\n      await build(basePath, transpilator)\n    }\n    catch (e) {\n      if (!(e instanceof CompilationError)) {\n        throw e\n      }\n\n      for (const diagnostic of e.errors) {\n        if (diagnostic.file == null) {\n          console.log(diagnostic.messageText)\n          continue\n        }\n\n        const location = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!!)\n        const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')\n        console.log(`${diagnostic.file.fileName} (${location.line + 1}, ${location.character + 1}): ${message}`)\n      }\n      process.exit(-1)\n      return\n    }\n  }\n}\n\nasync function build(basePath: string, transpilator: (basePath: string, config: ts.ParsedCommandLine, tsConfig: any) => Promise<any>) {\n  const tsConfigPath = path.join(basePath, \"tsconfig.json\")\n  const jsonResult = ts.parseConfigFileTextToJson(tsConfigPath, await readFile(tsConfigPath, \"utf8\"))\n  if (jsonResult.error != null) {\n    throw new CompilationError([jsonResult.error])\n  }\n\n  const result = ts.parseJsonConfigFileContent(jsonResult.config, ts.sys, basePath)\n  checkErrors(result.errors)\n\n  await transpilator(basePath, result, jsonResult.config)\n}\n\nexport function checkErrors(errors: ReadonlyArray<ts.Diagnostic>): void {\n  if (errors.length !== 0) {\n    throw new CompilationError(errors)\n  }\n}\n\nclass CompilationError extends Error {\n  constructor(public errors: ReadonlyArray<ts.Diagnostic>) {\n    super(\"Compilation error\")\n  }\n}"]}
